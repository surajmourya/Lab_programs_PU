#include <stdio.h>
#include <stdlib.h>

struct node {
    struct node* left;
    int data;
    struct node* right;
};

struct node* tree = NULL;

void create_tree();
struct node* insertElement(struct node*, int);
void preorderTraversal(struct node*);
void inorderTraversal(struct node*);
void postorderTraversal(struct node*);
struct node* smallestElement(struct node*);
struct node* largestElement(struct node*);
struct node* deleteElement(struct node*, int);
void deleteTree(struct node*);
int totalNodes(struct node*);
int totalExternalNodes(struct node*);
int totalInternalNodes(struct node*);

int main() {
    int option, val;
    struct node* ptr;
    create_tree();

    do {
        printf("\n 1. Insert Element");
        printf("\n 2. Preorder Traversal");
        printf("\n 3. Inorder Traversal");
        printf("\n 4. Postorder Traversal");
        printf("\n 5. Find the smallest element");
        printf("\n 6. Find the largest element");
        printf("\n 7. Delete an element");
        printf("\n 8. Count the total number of nodes");
        printf("\n 9. Count the total number of external nodes");
        printf("\n 10. Count the total number of internal nodes");
        printf("\n 11. Delete the tree");
        printf("\n 12. Exit");

        printf("\n\n Enter your option : ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                printf("\n Enter the value of the new node : ");
                scanf("%d", &val);
                tree = insertElement(tree, val);
                break;

            case 2:
                printf("\n The elements of the tree are : \n");
                preorderTraversal(tree);
                break;

            case 3:
                printf("\n The elements of the tree are : \n");
                inorderTraversal(tree);
                break;

            case 4:
                printf("\n The elements of the tree are : \n");
                postorderTraversal(tree);
                break;

            case 5:
                ptr = smallestElement(tree);
                if (ptr != NULL)
                    printf("\n Smallest element is : %d", ptr->data);
                else
                    printf("\n Tree is empty");
                break;

            case 6:
                ptr = largestElement(tree);
                if (ptr != NULL)
                    printf("\n Largest element is : %d", ptr->data);
                else
                    printf("\n Tree is empty");
                break;

            case 7:
                printf("\n Enter the element to be deleted : ");
                scanf("%d", &val);
                tree = deleteElement(tree, val);
                break;

            case 8:
                printf("\n Total no. of nodes = %d", totalNodes(tree));
                break;

            case 9:
                printf("\n Total no. of external nodes = %d", totalExternalNodes(tree));
                break;

            case 10:
                printf("\n Total no. of internal nodes = %d", totalInternalNodes(tree));
                break;

            case 11:
                deleteTree(tree);
                tree = NULL;
                printf("\n Tree deleted.");
                break;
        }
    } while (option != 12);

    return 0;
}

void create_tree() {
    // Initialize tree as empty
    tree = NULL;
}

struct node* insertElement(struct node* tree, int val) {

// write code for insert the element

}

void preorderTraversal(struct node* tree) {

// write code here

}

void inorderTraversal(struct node* tree) {

// write code here
}

void postorderTraversal(struct node* tree) {
    // write code here
}

struct node* deleteElement(struct node* tree, int val) {
    
// write code here.
}

void deleteTree(struct node* root) {
   
//write code here

}

struct node* smallestElement(struct node* root) {
    if (root == NULL) {
        return NULL;
    }
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

struct node* largestElement(struct node* root) {
    if (root == NULL) {
        return NULL;
    }
    while (root->right != NULL) {
        root = root->right;
    }
    return root;
}

int totalNodes(struct node* root) {
    if (root == NULL) {
        return 0;
    }
    return 1 + totalNodes(root->left) + totalNodes(root->right);
}

int totalExternalNodes(struct node* root) {
    if (root == NULL) {
        return 0;
    }
    if (root->left == NULL && root->right == NULL) {
        return 1;
    }
    return totalExternalNodes(root->left) + totalExternalNodes(root->right);
}

int totalInternalNodes(struct node* root) {
    if (root == NULL || (root->left == NULL && root->right == NULL)) {
        return 0;
    }
    return 1 + totalInternalNodes(root->left) + totalInternalNodes(root->right);
}
